---
title: "Google_Data_Analytics_Project 1"
author: "Moufid Alsaig"
date: '2022-03-09'
output: html_document
---
# More details on steps can be found on GitHub

# tools to be utilized in this project.

```{r}
library(skimr)
library(janitor)
library(lubridate)
library(tidyverse)
```

# import data and assign easier names.

```{r}
trips_Jan <- read.csv('202101-divvy-tripdata.csv')
trips_Feb <- read.csv('202102-divvy-tripdata.csv')
trips_Mar <- read.csv('202103-divvy-tripdata.csv')
trips_Apr <- read.csv('202104-divvy-tripdata.csv')
trips_May <- read.csv('202105-divvy-tripdata.csv')
trips_Jun <- read.csv('202106-divvy-tripdata.csv')
trips_Jul <- read.csv('202107-divvy-tripdata.csv')
trips_Aug <- read.csv('202108-divvy-tripdata.csv')
trips_Sep <- read.csv('202109-divvy-tripdata.csv')
trips_Oct <- read.csv('202110-divvy-tripdata.csv')
trips_Nov <- read.csv('202111-divvy-tripdata.csv')
trips_Dec <- read.csv('202112-divvy-tripdata.csv')
```
# Viewing the data briefly using Colnames or head: 

```{r}
head(trips_Jan)
head(trips_Feb)
head(trips_Mar)
head(trips_Apr)
head(trips_May)
head(trips_Jun)
head(trips_Jul)
head(trips_Aug)
head(trips_Sep)
head(trips_Oct)
head(trips_Nov)
head(trips_Dec)
```
# or 

colnames(trips_Jan) ...etc

# but we also should look at the entire dataset. using View (preferably for each month):

View(trips_Jan)...etc

# Since we have 12 different files, it would be highly impractical to do analysis on each file and must integrate them.

# Therefore, we need make sure all the columns have matching data attributes (type of data) in each file. 

# we can do this manually by using the str function: 

```{r}
str(trips_Jan)
str(trips_Feb)
str(trips_Mar)
str(trips_Apr)
str(trips_May)
str(trips_Jun)
str(trips_Jul)
str(trips_Aug)
str(trips_Sep)
str(trips_Oct)
str(trips_Nov)
str(trips_Dec)
```

# or 

# Have R do it for us by using the the compare_df_cols function: 

```{r}
compare_df_cols(trips_Jan, trips_Feb, trips_Mar, trips_Apr, trips_May, trips_Jun, trips_Jul, trips_Aug, trips_Sep, trips_Oct, trips_Nov, trips_Dec, return = "mismatch")
```

# The function confirmed no anomolies or discrepancies in data types. 

# combine files: 

```{r}
trips_2021 <- bind_rows(trips_Jan, trips_Feb, trips_Mar, trips_Apr, trips_May, trips_Jun, trips_Jul, trips_Aug, trips_Sep, trips_Oct, trips_Nov, trips_Dec)
```

# to take a look at the massive file: 

```{r}
View(trips_2021)
```
# The result is a very large file with over 5M entries.

# Before I proceed in manipulating the integrated file for cleaning and analysis, I want to save an original copy to make sure I can revert back to it if needed.

```{r}
write.csv(trips_2021, "C:\\X\\X\\X\\Google_Data_Analytics_Project\\Cyclistic_Integrated_Original.csv", row.names = FALSE)
```

# Upon initial review of the data, I realized there were missing values for January in the end_station_name and end_station_Id.
# In addition, the 'started_at' and 'ended_at' columns were characters instead of date-time - these will need to be fixed. 

# to remove missing or null values I have written the below code: 

```{r}
New_trips_2021 <- trips_2021[!(is.na(trips_2021$ride_id) | trips_2021$ride_id =="" | 
is.na(trips_2021$rideable_type) | trips_2021$rideable_type =="" | 
is.na(trips_2021$started_at) | trips_2021$started_at =="" | 
is.na(trips_2021$ended_at) | trips_2021$ended_at =="" | 
is.na(trips_2021$start_station_name) | trips_2021$start_station_name =="" | 
is.na(trips_2021$start_station_id) | trips_2021$start_station_id =="" | 
is.na(trips_2021$end_station_name) | trips_2021$end_station_name == "" | 
is.na(trips_2021$end_station_id) | trips_2021$end_station_id =="" | 
is.na(trips_2021$start_lat) | trips_2021$start_lat == "" | 
is.na(trips_2021$start_lng) | trips_2021$start_lng == "" | 
is.na(trips_2021$end_lat) | trips_2021$end_lat == "" | 
is.na(trips_2021$end_lng) | trips_2021$end_lng == "" | 
is.na(trips_2021$member_casual) | trips_2021$member_casual == ""),]
```
# to see the result of our code and make sure we do not see any null or blank spaces. 

View(New_trips_2021) 

# Before we begin analyzing our data , there is a problem with the started_at and ended_at columns - they Character type data.
# In order for our analysis to work, they have to be in date-time format: 

```{r}
New_trips_2021$started_at = strptime(New_trips_2021$started_at, format = "%Y-%m-%d %H:%M:%S")

New_trips_2021$ended_at = strptime(New_trips_2021$ended_at, format = "%Y-%m-%d %H:%M:%S")
```

# To confirm our changes worked: 

```{r}
str(New_trips_2021)

'data.frame':	4588302 obs. of  13 variables:
 $ ride_id           : chr  "B9F73448DFBE0D45" "457C7F4B5D3DA135" "57C750326F9FDABE" "4D518C65E338D070" ...
 $ rideable_type     : chr  "classic_bike" "electric_bike" "electric_bike" "electric_bike" ...
 $ started_at        : POSIXlt, format: "2021-01-24 19:15:38" "2021-01-23 12:57:38" "2021-01-09 15:28:04" ...
 $ ended_at          : POSIXlt, format: "2021-01-24 19:22:51" "2021-01-23 13:02:10" "2021-01-09 15:37:51" ...
 $ start_station_name: chr  "California Ave & Cortez St" "California Ave & Cortez St" "California Ave & Cortez St" "California Ave & Cortez St" ...
 $ start_station_id  : chr  "17660" "17660" "17660" "17660" ...
 $ end_station_name  : chr  "Wood St & Augusta Blvd" "California Ave & North Ave" "Wood St & Augusta Blvd" "Wood St & Augusta Blvd" ...
 $ end_station_id    : chr  "657" "13258" "657" "657" ...
 $ start_lat         : num  41.9 41.9 41.9 41.9 41.9 ...
 $ start_lng         : num  -87.7 -87.7 -87.7 -87.7 -87.7 ...
 $ end_lat           : num  41.9 41.9 41.9 41.9 41.9 ...
 $ end_lng           : num  -87.7 -87.7 -87.7 -87.7 -87.7 ...
 $ member_casual     : chr  "member" "member" "casual" "casual" ..
```
This confirms our code worked as our started at and ended at columns are now Date-Time. 

# Now let's take a look at what the overall data is telling us : 

```{r}
summary(New_trips_2021)
```
 ride_id          rideable_type        started_at                     ended_at                  
 Length:4588302     Length:4588302     Min.   :2021-01-01 00:02:24   Min.   :2021-01-01 00:08:39  
 Class :character   Class :character   1st Qu.:2021-06-04 17:34:07   1st Qu.:2021-06-04 17:55:22  
 Mode  :character   Mode  :character   Median :2021-07-28 17:33:49   Median :2021-07-28 17:51:18  
                                       Mean   :2021-07-25 06:16:42   Mean   :2021-07-25 06:38:31  
                                       3rd Qu.:2021-09-18 15:36:13   3rd Qu.:2021-09-18 16:02:46  
                                       Max.   :2021-12-31 23:59:48   Max.   :2022-01-03 17:32:18  
 start_station_name start_station_id   end_station_name   end_station_id       start_lat    
 Length:4588302     Length:4588302     Length:4588302     Length:4588302     Min.   :41.65  
 Class :character   Class :character   Class :character   Class :character   1st Qu.:41.88  
 Mode  :character   Mode  :character   Mode  :character   Mode  :character   Median :41.90  
                                                                             Mean   :41.90  
                                                                             3rd Qu.:41.93  
                                                                             Max.   :42.06  
   start_lng         end_lat         end_lng       member_casual     
 Min.   :-87.83   Min.   :41.65   Min.   :-87.83   Length:4588302    
 1st Qu.:-87.66   1st Qu.:41.88   1st Qu.:-87.66   Class :character  
 Median :-87.64   Median :41.90   Median :-87.64   Mode  :character  
 Mean   :-87.64   Mean   :41.90   Mean   :-87.64                     
 3rd Qu.:-87.63   3rd Qu.:41.93   3rd Qu.:-87.63                     
 Max.   :-87.53   Max.   :42.17   Max.   :-87.52

# There are some great insights from this, however, we are missing some items to enhance our calculations.  

# we need to create a column containing the each ride's length: 

```{r}
New_trips_2021$ride_time <- difftime(New_trips_2021$started_at, New_trips_2021$ended_at)
```

# We can test that our code ran well using the str function: 

```{r}
str(New_trips_2021)
``` 

# one thing we notice from the results of the str function is that the new column has a data type "difftime" instead of numeric
# we need to change that in order to perform calculations. 

```{r}
New_trips_2021$ride_time <- as.numeric(as.character(New_trips_2021$ride_time))
```

#to confirm, let's run the str function again. 
```{r}
str(New_trips_2021)
'data.frame':	4588302 obs. of  14 variables:
 $ ride_id           : chr  "B9F73448DFBE0D45" "457C7F4B5D3DA135" "57C750326F9FDABE" "4D518C65E338D070" ...
 $ rideable_type     : chr  "classic_bike" "electric_bike" "electric_bike" "electric_bike" ...
 $ started_at        : POSIXlt, format: "2021-01-24 19:15:38" "2021-01-23 12:57:38" "2021-01-09 15:28:04" ...
 $ ended_at          : POSIXlt, format: "2021-01-24 19:22:51" "2021-01-23 13:02:10" "2021-01-09 15:37:51" ...
 $ start_station_name: chr  "California Ave & Cortez St" "California Ave & Cortez St" "California Ave & Cortez St" "California Ave & Cortez St" ...
 $ start_station_id  : chr  "17660" "17660" "17660" "17660" ...
 $ end_station_name  : chr  "Wood St & Augusta Blvd" "California Ave & North Ave" "Wood St & Augusta Blvd" "Wood St & Augusta Blvd" ...
 $ end_station_id    : chr  "657" "13258" "657" "657" ...
 $ start_lat         : num  41.9 41.9 41.9 41.9 41.9 ...
 $ start_lng         : num  -87.7 -87.7 -87.7 -87.7 -87.7 ...
 $ end_lat           : num  41.9 41.9 41.9 41.9 41.9 ...
 $ end_lng           : num  -87.7 -87.7 -87.7 -87.7 -87.7 ...
 $ member_casual     : chr  "member" "member" "casual" "casual" ...
 $ ride_time         : num  433 272 587 537 609 ...
 
 #Perfect! 
 
 #now, let's take a look at the summary table for this dataset: 
 
 ```{r}
summary(New_trips_2021)
ide_id          rideable_type        started_at                     ended_at                  
 Length:4588302     Length:4588302     Min.   :2021-01-01 00:02:24   Min.   :2021-01-01 00:08:39  
 Class :character   Class :character   1st Qu.:2021-06-04 17:34:07   1st Qu.:2021-06-04 17:55:22  
 Mode  :character   Mode  :character   Median :2021-07-28 17:33:49   Median :2021-07-28 17:51:18  
                                       Mean   :2021-07-25 06:16:42   Mean   :2021-07-25 06:38:31  
                                       3rd Qu.:2021-09-18 15:36:13   3rd Qu.:2021-09-18 16:02:46  
                                       Max.   :2021-12-31 23:59:48   Max.   :2022-01-03 17:32:18  
 start_station_name start_station_id   end_station_name   end_station_id       start_lat    
 Length:4588302     Length:4588302     Length:4588302     Length:4588302     Min.   :41.65  
 Class :character   Class :character   Class :character   Class :character   1st Qu.:41.88  
 Mode  :character   Mode  :character   Mode  :character   Mode  :character   Median :41.90  
                                                                             Mean   :41.90  
                                                                             3rd Qu.:41.93  
                                                                             Max.   :42.06  
   start_lng         end_lat         end_lng       member_casual        ride_time      
 Min.   :-87.83   Min.   :41.65   Min.   :-87.83   Length:4588302     Min.   :  -6954  
 1st Qu.:-87.66   1st Qu.:41.88   1st Qu.:-87.66   Class :character   1st Qu.:    417  
 Median :-87.64   Median :41.90   Median :-87.64   Mode  :character   Median :    732  
 Mean   :-87.64   Mean   :41.90   Mean   :-87.64                      Mean   :   1309  
 3rd Qu.:-87.63   3rd Qu.:41.93   3rd Qu.:-87.63                      3rd Qu.:   1327  
 Max.   :-87.53   Max.   :42.17   Max.   :-87.52                      Max.   :3356649

# first thing I noticed here is that the shortest ride length or time is in the negative, which is impossible
# this could be due to a lot of reasons including incorrect or reversed input - however, for this case study
# we are going to remove all values below 0 

```{r exclusion of unnecessary values}
New_trips_2021 <- New_trips_2021[!(New_trips_2021$ride_time<0),]
```

# The date does appear to be missing some values that would help the analysis process - including showing which month, days, and 
# days of the week are we seeing rides and creating columns to reflect this data would help us in the analysis and visualization.

```{r}
New_trips_2021$date <- as.Date(New_trips_2021$started_at)
New_trips_2021$month <- format(as.Date(New_trips_2021$date), "%m")
New_trips_2021$day <- format(as.Date(New_trips_2021$date), "%d")
New_trips_2021$week_day <- format(as.Date(New_trips_2021$date), "%A")

```
# For visualization and further anaylsis I have decided to use Tableau. however, we need to export the dataframe into a csv file first

```{r}
write.csv(New_trips_2021, "C:\\x\\x\\x\\Google_Data_Analytics_Project\\Cyclistic_Integrated_V2.csv", row.names = FALSE)

```





